// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: scrud.proto

package scrud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScrudClient is the client API for Scrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScrudClient interface {
	// Create a message
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	// Read a message
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	// Update a message
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	// Delete a message
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	// Send a message
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
	// Send all messages
	SendAll(ctx context.Context, in *SendAllRequest, opts ...grpc.CallOption) (Scrud_SendAllClient, error)
}

type scrudClient struct {
	cc grpc.ClientConnInterface
}

func NewScrudClient(cc grpc.ClientConnInterface) ScrudClient {
	return &scrudClient{cc}
}

func (c *scrudClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/scrud.Scrud/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrudClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, "/scrud.Scrud/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrudClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/scrud.Scrud/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrudClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, "/scrud.Scrud/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrudClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := c.cc.Invoke(ctx, "/scrud.Scrud/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrudClient) SendAll(ctx context.Context, in *SendAllRequest, opts ...grpc.CallOption) (Scrud_SendAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scrud_ServiceDesc.Streams[0], "/scrud.Scrud/SendAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &scrudSendAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scrud_SendAllClient interface {
	Recv() (*SendAllReply, error)
	grpc.ClientStream
}

type scrudSendAllClient struct {
	grpc.ClientStream
}

func (x *scrudSendAllClient) Recv() (*SendAllReply, error) {
	m := new(SendAllReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScrudServer is the server API for Scrud service.
// All implementations must embed UnimplementedScrudServer
// for forward compatibility
type ScrudServer interface {
	// Create a message
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	// Read a message
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	// Update a message
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
	// Delete a message
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	// Send a message
	Send(context.Context, *SendRequest) (*SendReply, error)
	// Send all messages
	SendAll(*SendAllRequest, Scrud_SendAllServer) error
	mustEmbedUnimplementedScrudServer()
}

// UnimplementedScrudServer must be embedded to have forward compatible implementations.
type UnimplementedScrudServer struct {
}

func (UnimplementedScrudServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedScrudServer) Read(context.Context, *ReadRequest) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedScrudServer) Update(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedScrudServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedScrudServer) Send(context.Context, *SendRequest) (*SendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedScrudServer) SendAll(*SendAllRequest, Scrud_SendAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SendAll not implemented")
}
func (UnimplementedScrudServer) mustEmbedUnimplementedScrudServer() {}

// UnsafeScrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrudServer will
// result in compilation errors.
type UnsafeScrudServer interface {
	mustEmbedUnimplementedScrudServer()
}

func RegisterScrudServer(s grpc.ServiceRegistrar, srv ScrudServer) {
	s.RegisterService(&Scrud_ServiceDesc, srv)
}

func _Scrud_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrudServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrud.Scrud/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrudServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scrud_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrudServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrud.Scrud/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrudServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scrud_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrudServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrud.Scrud/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrudServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scrud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrud.Scrud/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrudServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scrud_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrudServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrud.Scrud/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrudServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scrud_SendAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScrudServer).SendAll(m, &scrudSendAllServer{stream})
}

type Scrud_SendAllServer interface {
	Send(*SendAllReply) error
	grpc.ServerStream
}

type scrudSendAllServer struct {
	grpc.ServerStream
}

func (x *scrudSendAllServer) Send(m *SendAllReply) error {
	return x.ServerStream.SendMsg(m)
}

// Scrud_ServiceDesc is the grpc.ServiceDesc for Scrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scrud.Scrud",
	HandlerType: (*ScrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Scrud_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Scrud_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Scrud_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Scrud_Delete_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Scrud_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendAll",
			Handler:       _Scrud_SendAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scrud.proto",
}
